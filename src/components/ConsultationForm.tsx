import React, { useState } from 'react';
import { Save, X, Calendar, Weight, Activity, Heart, Thermometer } from 'lucide-react';
import { Patient, Consultation } from '../types';

interface ConsultationFormProps {
  patient: Patient;
  consultation?: Consultation;
  onSave: (consultation: Consultation) => void;
  onCancel: () => void;
}

export function ConsultationForm({ patient, consultation, onSave, onCancel }: ConsultationFormProps) {
  const [formData, setFormData] = useState({
    fecha_consulta: consultation?.fecha_consulta || new Date().toISOString().split('T')[0],
    peso: consultation?.peso || patient.peso,
    masa_muscular: consultation?.masa_muscular || 0,
    grasa_corporal: consultation?.grasa_corporal || 0,
    agua_corporal: consultation?.agua_corporal || 0,
    masa_osea: consultation?.masa_osea || 0,
    metabolismo_basal: consultation?.metabolismo_basal || 0,
    presion_arterial_sistolica: consultation?.presion_arterial_sistolica || 0,
    presion_arterial_diastolica: consultation?.presion_arterial_diastolica || 0,
    frecuencia_cardiaca: consultation?.frecuencia_cardiaca || 0,
    temperatura: consultation?.temperatura || 0,
    notas_consulta: consultation?.notas_consulta || '',
    plan_nutricional: consultation?.plan_nutricional || '',
    proxima_cita: consultation?.proxima_cita || '',
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const consultationData: Consultation = {
      id: consultation?.id || '', // ID will be generated by the backend for new consultations
      patient_id: patient.id,
      ...formData,
      // Convert empty values to undefined for optional fields
      masa_muscular: formData.masa_muscular || undefined,
      grasa_corporal: formData.grasa_corporal || undefined,
      agua_corporal: formData.agua_corporal || undefined,
      masa_osea: formData.masa_osea || undefined,
      metabolismo_basal: formData.metabolismo_basal || undefined,
      presion_arterial_sistolica: formData.presion_arterial_sistolica || undefined,
      presion_arterial_diastolica: formData.presion_arterial_diastolica || undefined,
      frecuencia_cardiaca: formData.frecuencia_cardiaca || undefined,
      temperatura: formData.temperatura || undefined,
      plan_nutricional: formData.plan_nutricional || undefined,
      proxima_cita: formData.proxima_cita || undefined,
      created_at: consultation?.created_at || new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };

    onSave(consultationData);
  };

  return (
    <div className="max-w-4xl mx-auto">
      <div className="bg-white rounded-lg shadow-sm border">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">
            {consultation ? 'Editar Consulta' : 'Nueva Consulta'}
          </h2>
          <p className="text-gray-600">
            Paciente: {patient.nombre} {patient.apellido}
          </p>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          {/* Basic Information */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <Calendar className="h-4 w-4 inline mr-2" />
                Fecha de Consulta *
              </label>
              <input
                type="date"
                required
                value={formData.fecha_consulta}
                onChange={(e) => setFormData({ ...formData, fecha_consulta: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <Weight className="h-4 w-4 inline mr-2" />
                Peso (kg) *
              </label>
              <input
                type="number"
                step="0.1"
                required
                value={formData.peso}
                onChange={(e) => setFormData({ ...formData, peso: Number(e.target.value) })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>

          {/* Body Composition */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <Activity className="h-5 w-5 mr-2 text-blue-600" />
              Composición Corporal
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Masa Muscular (%)
                </label>
                <input
                  type="number"
                  step="0.1"
                  value={formData.masa_muscular}
                  onChange={(e) => setFormData({ ...formData, masa_muscular: Number(e.target.value) })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Grasa Corporal (%)
                </label>
                <input
                  type="number"
                  step="0.1"
                  value={formData.grasa_corporal}
                  onChange={(e) => setFormData({ ...formData, grasa_corporal: Number(e.target.value) })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Agua Corporal (%)
                </label>
                <input
                  type="number"
                  step="0.1"
                  value={formData.agua_corporal}
                  onChange={(e) => setFormData({ ...formData, agua_corporal: Number(e.target.value) })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Masa Ósea (kg)
                </label>
                <input
                  type="number"
                  step="0.1"
                  value={formData.masa_osea}
                  onChange={(e) => setFormData({ ...formData, masa_osea: Number(e.target.value) })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Metabolismo Basal (kcal)
                </label>
                <input
                  type="number"
                  value={formData.metabolismo_basal}
                  onChange={(e) => setFormData({ ...formData, metabolismo_basal: Number(e.target.value) })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
          </div>

          {/* Vital Signs */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <Heart className="h-5 w-5 mr-2 text-red-600" />
              Signos Vitales
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Presión Sistólica (mmHg)
                </label>
                <input
                  type="number"
                  value={formData.presion_arterial_sistolica}
                  onChange={(e) => setFormData({ ...formData, presion_arterial_sistolica: Number(e.target.value) })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Presión Diastólica (mmHg)
                </label>
                <input
                  type="number"
                  value={formData.presion_arterial_diastolica}
                  onChange={(e) => setFormData({ ...formData, presion_arterial_diastolica: Number(e.target.value) })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Frecuencia Cardíaca (bpm)
                </label>
                <input
                  type="number"
                  value={formData.frecuencia_cardiaca}
                  onChange={(e) => setFormData({ ...formData, frecuencia_cardiaca: Number(e.target.value) })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Thermometer className="h-4 w-4 inline mr-1" />
                  Temperatura (°C)
                </label>
                <input
                  type="number"
                  step="0.1"
                  value={formData.temperatura}
                  onChange={(e) => setFormData({ ...formData, temperatura: Number(e.target.value) })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
          </div>

          {/* Notes and Plans */}
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Notas de la Consulta *
              </label>
              <textarea
                required
                value={formData.notas_consulta}
                onChange={(e) => setFormData({ ...formData, notas_consulta: e.target.value })}
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Observaciones, síntomas, evolución del paciente..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Plan Nutricional
              </label>
              <textarea
                value={formData.plan_nutricional}
                onChange={(e) => setFormData({ ...formData, plan_nutricional: e.target.value })}
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Recomendaciones dietéticas, cambios en el plan alimentario..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Próxima Cita
              </label>
              <input
                type="date"
                value={formData.proxima_cita}
                onChange={(e) => setFormData({ ...formData, proxima_cita: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-6 border-t">
            <button
              type="button"
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors flex items-center"
            >
              <X className="h-4 w-4 mr-2" />
              Cancelar
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors flex items-center"
            >
              <Save className="h-4 w-4 mr-2" />
              Guardar Consulta
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}